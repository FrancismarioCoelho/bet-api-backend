# Utiliza uma imagem pública do Docker que inclui o JDK 22.
image: openjdk:22-jdk

stages:
  - build
  - test
  - deploy

# Cache configurado para reutilizar as dependências baixadas pelo Maven.
cache:
  paths:
    - .m2/repository/

# Job para construir o projeto. Este job executa a limpeza e compilação do projeto.
build:
  stage: build
  script:
    - echo "Compilando o projeto..."
    - mvn clean package  # Compila o projeto e empacota.
  artifacts:
    paths:
      - target/  # Armazena os artefatos de build, como JARs ou WARs.
    expire_in: 1 hour  # Configura os artefatos para expirar em 1 hora se não forem usados.

# Job para executar testes unitários e de integração.
test:
  stage: test
  script:
    - echo "Executando testes..."
    - mvn test  # Executa todos os testes definidos no projeto Maven.
  artifacts:
    when: always
    paths:
      - target/surefire-reports/  # Guarda os relatórios de teste gerados durante a fase de testes.
    expire_in: 1 hour  # Configura os artefatos para expirar em 1 hora.

# Job para realizar o deployment do projeto. Isso pode envolver o deploy em um ambiente de teste ou produção.
deploy:
  stage: deploy
  script:
    - echo "Realizando o deployment da aplicação..."
    - mvn deploy -DskipTests  # Realiza o deployment usando Maven, evitando a repetição de testes.
  environment:
    name: production  # Define o ambiente de deploy como produção.
    url: http://your-production-url.com  # URL onde a aplicação estará acessível após o deploy.
  only:
    - main  # Especifica que este job deve ser executado apenas na branch 'main'.
